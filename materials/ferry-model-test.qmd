---
title: "Ferry Model Test"
author: "Ryan Johnson"
format: html
---
```{r}
library(tidyverse)
library(pins)
library(tidymodels)
library(lubridate)
```


```{r}
# Read in Pin
board <- board_connect(auth = "envvar")
ferry_data <- pin_read(board, "katie.masiello/vesselhistory_w_weather") |> 
  as_tibble()
```

```{r}
# Prep data for modeling
ferry_model_data <- ferry_data |> 
  
  # Select for columns of interest
  select(vessel, departing, closest_hour, date, precipitation, weather_code, cloud_cover_low, wind_speed_10m, wind_gusts_10m, delay) |> 
  
  # Convert dates
  mutate(date = ymd(date)) |> 
  mutate(closest_hour = ymd_hms(closest_hour, truncated = 3)) |> 
  mutate(hour = as.factor(hour(closest_hour))) |> 
  select(-closest_hour) |> 
  
  # Change weather code to factor
  mutate(weather_code = as.factor(weather_code)) |> 
  
  # Convert chr to factors
  mutate_if(is.character, as.factor) |> 
  
  # Exclude missing data
  na.omit()

skimr::skim(ferry_model_data)
```

```{r}
# Data Split
set.seed(222)

# Put 3/4 of the data into the training set 
data_split <- initial_split(ferry_model_data, prop = 3/4)

# Create data frames for the two sets:
train_data <- training(data_split)
test_data  <- testing(data_split)
```


```{r}
# Recipe and feature engineering
ferry_rec <- 
  
  # Add recipe
  recipe(delay ~ ., data = train_data) |> 
  
  # Extract predictors like day of week and month from date
  # Also indicate if a holiday
  step_date(date, features = c("dow", "month")) |> 
  step_holiday(date, 
               holidays = timeDate::listHolidays("US"),
               keep_original_cols = FALSE) |>
  
  # Convert all factors to binary "dummy variables"
  step_dummy(all_nominal_predictors())
  

prepared_recipe <- prep(ferry_rec, training = train_data)
transformed_data <- bake(prepared_recipe, new_data = NULL)
```

```{r}
# Specify model using parsnip
ferry_mod_lm <- 
  linear_reg() |> 
  set_engine("lm")

# Bundle parsnip model with recipe
ferry_workflow_lm <- 
  workflow() |> 
  add_model(ferry_mod_lm) |> 
  add_recipe(ferry_rec)

# Train the model
ferry_fit_lm <- 
  ferry_workflow_lm |> 
  fit(data = train_data)
```


```{r}
# Make Prediction
predictions_lm <- predict(ferry_fit_lm, test_data) |> 
  bind_cols(test_data)

# Evaluate the model
metrics_lm <- predictions_lm %>%
  metrics(truth = delay, estimate = .pred)

metrics_lm

ggplot(predictions_lm, aes(x = delay, y = .pred)) +
  geom_abline(linetype = 2) +
  geom_point(alpha = 0.25) + 
  labs(title = "LM", y = "Prediction", x = "actual") +
  xlim(0, 25) +
  ylim(0, 25)
```

```{r}
# Try random forests
ferry_model_rf <- 
  rand_forest(trees = 1000, min_n = 5) |> 
  set_engine("ranger", verbose = TRUE) |> 
  set_mode("regression")

# Bundle parsnip model with recipe
ferry_workflow_rf <- 
  workflow() |> 
  add_model(ferry_model_rf) |> 
  add_recipe(ferry_rec)

# Train the model
ferry_fit_rf <- 
  ferry_workflow_rf |> 
  fit(data = train_data)
```

```{r}
# Make Prediction
predictions_rf <- predict(ferry_fit_rf, test_data) |> 
  bind_cols(test_data)

# Evaluate the model
metrics_rf <- predictions_rf %>%
  metrics(truth = delay, estimate = .pred)

metrics_rf

ggplot(predictions_rf, aes(x = delay, y = .pred)) +
  geom_abline(linetype = 2) +
  geom_point(alpha = 0.25) + 
  labs(title = "RF", y = "Prediction", x = "actual") +
  xlim(0, 25) +
  ylim(0, 25)
```