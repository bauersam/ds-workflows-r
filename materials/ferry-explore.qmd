---
title: "Exploring Washington State Ferry Data"
author: "Ryan Johnson"
format: html
editor: visual
---

## Setup

```{r}
# Load Packages
library(httr2)
library(tidyverse)
library(jsonlite)
```

## Helper Functions

```{r}
# Convert time stamp (e.g., /Date(1716553800000-0700)/) to actual datetime
convert_timestamp <- function(timestamp) {
  # Define timestamp and timezone offset
  timestamp_ms <- as.numeric(str_extract(timestamp, "(?<=/Date\\()\\d+(?=[-+])"))
  
  # Convert the timestamp to seconds
  timestamp_sec <- timestamp_ms / 1000
  
  # Convert to datetime object
  as.POSIXct(timestamp_sec, origin = "1970-01-01", tz = "US/Pacific")
}
```

## Wrap APIs

```{r}
# Cache Flush Date
vessel_cacheflushdate <- function(apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # Make Request
  resp <- request("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest") |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_url_path_append("cacheflushdate") |> 
    req_perform() |> 
    resp_body_json()
}



# Vessel Accomodations
vessel_accommodations <- function(VesselID = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselID is provided
  if (is.null(VesselID)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselaccommodations"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselaccommodations", "/", VesselID)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}


# Vessel Basics
vessel_basics <- function(VesselID = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselID is provided
  if (is.null(VesselID)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselbasics"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselbasics", "/", VesselID)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}


# Vessel History
vessel_history <- function(VesselName = NULL, DateStart = NULL, DateEnd = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselName is provided
  if (is.null(VesselName)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselhistory"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselhistory", 
                      "/", VesselName, 
                      "/", DateStart,
                      "/", DateEnd)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}


## Vessel History (return clean tibble)
vessel_history_tibble <- function(VesselName = NULL, DateStart = NULL, DateEnd = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # NULL to NA function for lists
  replace_null_with_na <- function(x) {
    map(x, ~ if (is.null(.x)) NA else .x)
  }
  
  vh <- vessel_history(VesselName, DateStart, DateEnd, apiaccesscode)
  
  # If empty, do nothing. Otherwise, parse list to tibble
  if (length(vh) == 0) {
    message(paste0(VesselName, " did not return any history data!"))
  } else {
    vh |> 
      
      map(replace_null_with_na) |> 
      #map(compact) |> 
      
      # Convert to tibble
      map_dfr(~as_tibble(.x)) |>
      
      # Convert timestamps
      mutate(ScheduledDepart = convert_timestamp(ScheduledDepart)) |> 
      mutate(ActualDepart = convert_timestamp(ActualDepart)) |> 
      select(-EstArrival, -Date) |> 
      
      # Calculate Depart Delay in minutes
      mutate(DepartDelay = difftime(ActualDepart, ScheduledDepart, units = "mins"))
  }
}


# Vessel Locations
vessel_locations <- function(VesselID = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselID is provided
  if (is.null(VesselID)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vessellocations"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vessellocations", "/", VesselID)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}


# Vessel Stats
vessel_stats <- function(VesselID = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselID is provided
  if (is.null(VesselID)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselstats"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselstats", "/", VesselID)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}


# Vessel verbose
vessel_verbose <- function(VesselID = NULL, apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) {
  
  # If VesselID is provided
  if (is.null(VesselID)) {
    endpoint = "http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselverbose"
  } else {
    endpoint = paste0("http://www.wsdot.wa.gov/Ferries/API/Vessels/rest/vesselverbose", "/", VesselID)
  }
  
  # Make Request
  request(endpoint) |> 
    req_url_query(apiaccesscode = apiaccesscode) |> 
    req_perform() |> 
    resp_body_json()
}
```

## Data Analysis

What are the Vessels?

```{r}
vessels <- vessel_basics() |> 
  map_dfr(~as_tibble(.x)) |> 
  distinct(VesselName) |> 
  pull()

vessels
```

```{r}
# Walla Walla and Wenatchee are causing issues:
#  Walla Walla results in a bad URL for the API
#  Wenatchee/Issaquah/Kaleetan/Salish don't have any data?
history_data <- vessels[-19] |> 
  map(~vessel_history_tibble(.x, today() - days(2), today())) |> 
  compact() |> 
  bind_rows()

history_data
```

```{r}
history_data |> 
  group_by(Vessel) |> 
  ggplot(aes(y = DepartDelay, color = Vessel)) +
  geom_boxplot() +
  theme_minimal() +
  labs(y = "Depart Delay in Minutes")
```
