---
title: "Read, Explore, and Write Raw Washington State Ferry Data"
output: html_document
format:
  email:
    table-of-contents: true
    anchor-sections: true
    code-fold: true
    code-overflow: wrap
    code-summary: "Show Code"
    code-tools: true
    code-link: true
editor_options: 
  chunk_output_type: console
execute: 
  eval: true
---

## Are we in test mode?
```{r}
#| label: identify test mode

# set TEST_MODE=TRUE to preview the alert email. 
if(Sys.getenv("TEST_MODE") == TRUE){
  test_mode <- TRUE
  }else test_mode <- FALSE
```

`r if(test_mode == TRUE) { "<h3>❗❗ Report generated in test mode. Data scan omitted for speed, raw data not written to pin, and an email alert is sent regardless of record count ❗❗</h3>\n" }`

## Setup
```{r}
#| label: setup
 
library(httr2)
library(tidyverse)
library(janitor)
```


## Retrieve vessel verbose data

```{r}
#| label: download raw vessel data
 
library(httr2)
library(tidyverse)
library(janitor)

base_url <- "https://www.wsdot.wa.gov/Ferries/API/Vessels/rest"

vesselverbose_ep <- "vesselverbose"

req <- request(base_url) |> req_url_query(apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE"))

vesseldata_raw <- req |> 
  req_url_path_append(vesselverbose_ep) |> 
  req_perform() |> 
  resp_body_string() |> 
  jsonlite::fromJSON() |> 
  as_tibble()

# the results include a nested dataframe of Class information. Unnest this.
# Also use `janitor` to clean column names
vesseldata_raw <- vesseldata_raw |> unnest(Class) |> clean_names()

```

## Explore the data
```{r}
#| label: data exploration
#| eval: !expr 'test_mode != TRUE'

str(vesseldata_raw)
summary(vesseldata_raw)



library(skimr)
skim(vesseldata_raw)

library(pointblank)
vessel_scan <- scan_data(vesseldata_raw, sections = "OVMS")
vessel_scan
```



## Retrieve vessel history

```{r}
#| label: download raw vessel history

start_date <- "2023-05-31"
end_date <- "2024-05-31"
vesselnames <- vesseldata_raw |> pull(vessel_name)


get_vesselhistory <- function(vesselname, start_date, end_date) {
  
  cat(glue::glue("Getting vessel history for {vesselname}..."))
  vesselhistory <- request("https://www.wsdot.wa.gov/Ferries/API/Vessels/rest") |> 
    req_url_path_append("vesselhistory", URLencode(vesselname), start_date, end_date) |> 
    req_url_query(apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) |> 
    req_perform() |> 
    resp_body_string() |> 
    jsonlite::fromJSON() |> 
    as_tibble()

  cat(glue::glue("\t{nrow(vesselhistory)} records retrieved for {vesselname}"),"\n")
  vesselhistory
  }


data_list <- map(vesselnames, get_vesselhistory, start_date, end_date)

vesselhistory_raw <- bind_rows(data_list) |> clean_names()

num_records_vesselhistory <- nrow(vesselhistory_raw)

# set alert
if(num_records_vesselhistory < 10 | test_mode == TRUE){
  alert_message <- glue::glue("There was a problem with the vessel history data retrieved. {num_records_vesselhistory} rows were retrieved.")
send_email <- TRUE
}

```


## TODO: 
We will want to do an append write on the database to add vesselhistory and could also append weather data?
Change vesselhistory to a date range
Make the weather lookup more robust if date not found


## Pin data 
For lack of a database for now. 

```{r}
#| label: write raw data
#| eval: !expr 'test_mode != TRUE'

library(pins)

board <- board_connect()

pin_write(board, vesseldata_raw, 
          title="Raw `vesselverbose` data from WSDOT", 
          description="from `Ferries/API/Vessels/rest/vesselverbose`")

pin_write(board, vesselhistory_raw,
          title="Raw `vesselhistory` data from WSDOT",
          description="from `Ferries/API/Vessels/rest/vesselhistory`")

```




::: {.email}

::: {.email-scheduled}
`{r} send_email`
:::

::: {.subject}
⚠️ Ferry Project: There was an issue with the raw data.
:::

Fewer rows of raw data were retrieved than expected.  The number of records are `{r} num_records_vesselhistory`.


:::

