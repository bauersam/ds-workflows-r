---
title: "Download initial bulk data for vessel history and weather"
output: html_document
format:
  html:
    table-of-contents: true
    anchor-sections: true
    code-fold: true
    code-overflow: wrap
    code-summary: "Show Code"
    code-tools: true
    code-link: true
editor_options: 
  chunk_output_type: console
---

## Purpose

This document downloads a bulk amount of data for vessel history and
historical weather to provide an initial set of data for our model.

From this, we will schedule periodic data pulls to append to these
datasets.

## Setup

```{r}
#| label: setup
 
library(httr2)
library(tidyverse)
library(janitor)
library(glue)
library(ferryfairy)
library(DBI)
library(odbc)

```

## Retrieve vessel history

### Get vessel data

This provides the list of vessels

```{r}
#| label: download raw vessel data
 
base_url <- "https://www.wsdot.wa.gov"

endpoint <- "ferries/api/vessels/rest/vesselverbose"

# Compose the API request 
req <- request(base_url) |> 
  req_url_path_append(endpoint) |> 
  req_url_query(apiaccesscode = Sys.getenv("WSDOT_ACCESS_CODE")) 
  
# perform the request
response <- req |> 
  req_perform()
response

# convert the body of the response to a tibble
response_body <- response |> 
  resp_body_string() |> 
  jsonlite::fromJSON() |> 
  as_tibble()
response_body

# Sometimes special characters or spaces in column names are not
# database-friendly, so we will use `janitor::clean_names` to
# clean column names so there are no issues writing the data.
# Additionally, the results include a nested dataframe of Class information - 
# we will unnest this so there are no errors with our database interpreting this.
vesselinfo_raw <- response_body |> unnest(Class) |>  clean_names() 
vesselinfo_raw

```


### Download raw vessel history

```{r}
#| label: download raw vessel history

# Will plan on making the scheduled data pull capture 1 month back and run on a cadence more frequent than 1 month to ensure completeness in data.

start_date <- "2021-01-01"
end_date <- today()

vesselnames <- vesselinfo_raw |> pull(vessel_name)
start <- Sys.time()

data_list <- map(vesselnames, get_vesselhistory, start_date, end_date)

vesselhistory_raw <- bind_rows(data_list) |> clean_names()

end <- Sys.time()

num_records_vesselhistory <- nrow(vesselhistory_raw)
duration <- end - start


```

## Get historical weather data

### Get terminal locations

```{r}

terminallocations <- ferryfairy::get_terminalinfo()

```

### Download historical weather data

```{r}

# note the website says this is equivalent to about 45 API calls in one to go this far back. Limit is 600 per min, 5k per hour, 10k per day. need to throttle the requests because there are 20 locations, so add a pause value. 

# and do in pieces in case it fails with a 504 timeout

terminals_p1 <- terminallocations$terminal_name[1:10]
terminals_p2 <- terminallocations$terminal_name[11:nrow(terminallocations)]

weather_terminal_history_raw_p1 <- map(terminals_p1, 
                                    get_terminal_weather_history, 
                                    start_date, 
                                    end_date, 
                                    pause=5) |> bind_rows() 

weather_terminal_history_raw_p2 <- map(terminals_p2, 
                                    get_terminal_weather_history, 
                                    start_date, 
                                    end_date, 
                                    pause=5) |> bind_rows() 

weather_terminal_history_raw <- bind_rows(weather_terminal_history_raw_p1,
                                          weather_terminal_history_raw_p2)
```

## Write weather data to database
```{r}
#| label: database write

my_df_name <- glue("weather_terminal_history_raw_{Sys.getenv('DATABASE_SCHEMA')}")

con <- dbConnect(
  odbc::odbc(),
  Driver      = "postgresql",
  Server      = Sys.getenv("DATABASE_HOST"),
  Port        = "5432",
  Database    = Sys.getenv("DATABASE_NAME_R"),
  UID         = Sys.getenv("DATABASE_USER_R"),
  PWD         = Sys.getenv("DATABASE_PASSWORD_R"),
  timeout     = 10
)
con

# Insert your start time stamp
start_time <- Sys.time()

DBI::dbWriteTable(conn = con, # the connection
                  name = DBI::Id(
                    schema=Sys.getenv("DATABASE_SCHEMA"), # our database schema
                    name=my_df_name), # the name of the table you will create in the DB
                  value = weather_terminal_history_raw,
                  overwrite = TRUE)


# Insert your end time stamp
end_time <- Sys.time()
duration <- end_time - start_time


print(glue("ℹ️ Info: Writing `{my_df_name}` to database took", round(duration[[1]], 2), units(duration), .sep = " "))
```

## Write vessel history data to database
```{r}
#| label: vessel history database write

my_df_name <- glue("vesselhistory_raw_{Sys.getenv('DATABASE_SCHEMA')}")


# Insert your start time stamp
start_time <- Sys.time()

DBI::dbWriteTable(conn = con, # the connection
                  name = DBI::Id(
                    schema=config::get("schema", config=env), # our database schema
                    name=my_df_name), # the name of the table you will create in the DB
                  value = vesselhistory_raw,
                  overwrite = TRUE)


# Insert your end time stamp
end_time <- Sys.time()
duration <- end_time - start_time


print(glue("ℹ️ Info: Writing `{my_df_name}` to database took", round(duration[[1]], 2), units(duration), .sep = " "))

```

## Write vessel info data to database
```{r}
#| label: vessel info database write

env <- "production"

my_df_name <- glue("vesselinfo_raw_{config::get('suffix', config=env)}")


# Insert your start time stamp
start_time <- Sys.time()

DBI::dbWriteTable(conn = con, # the connection
                  name = DBI::Id(
                    schema=config::get("schema", config=env), # our database schema
                    name=my_df_name), # the name of the table you will create in the DB
                  value = vesselinfo_raw,
                  overwrite = TRUE)


# Insert your end time stamp
end_time <- Sys.time()
duration <- end_time - start_time


print(glue("ℹ️ Info: Writing `{my_df_name}` to database took", round(duration[[1]], 2), units(duration), .sep = " "))

```

### Determine date spans

```{r}
vh_dates <- vesselhistory_raw |> pull(date) |> convert_timestamp() |> as.Date() |> unique() |> sort()
vh_start <- vh_dates[1]
vh_end <- vh_dates[length(vh_dates)]

wx_dates <- weather_terminal_history_raw |> select(time) |> mutate(time = ymd_hm(time, tz = "America/Los_Angeles")) |> pull(time) |> as.Date() |> unique() |> sort()
wx_start <- wx_dates[1]
wx_end <- wx_dates[length(wx_dates)]

```

<!-- ```{r} -->
<!-- library(sparklyr) -->
<!-- library(dbplyr) -->

<!-- sc <- spark_connect( -->
<!--     cluster_id = "0605-141252-8r7zwtxd", -->
<!--     version = "14.2", -->
<!--     method = "databricks_connect" -->
<!-- ) -->


<!-- copy_to(dest = sc,  -->
<!--         df = vesselhistory_raw,  -->
<!--         name = in_catalog("sol_eng_ds_workflows_workshop", "default","vessel_history_raw"), -->
<!--         overwrite = TRUE -->
<!--         ) -->

<!-- copy_to(dest = sc, -->
<!--         df = weather_terminal_history_raw, -->
<!--         name = in_catalog("sol_eng_ds_workflows_workshop", "default","terminal_wx_history_raw"), -->
<!--         overwrite = TRUE -->
<!-- ) -->
<!-- # spark_write_table(vesselhistory_raw, -->
<!-- #     name = in_catalog("sol_eng_ds_workflows_workshop", "default","vessel_history_raw"), -->
<!-- #     mode = "overwrite" -->
<!-- #   ) -->
<!-- df <- tbl(sc, in_catalog("sol_eng_ds_workflows_workshop", "default","terminal_wx_history_raw")) -->
<!-- ``` -->

<!-- tbl(sc, in_catalog("samples", "nyctaxi", "trips")) -->

<!-- ```{r} -->
<!-- library(pins) -->

<!-- pin_write(board, vesselhistory_raw, -->
<!--           title="Raw `vesselhistory` data from WSDOT", -->
<!--           description=glue("from `Ferries/API/Vessels/rest/vesselhistory` spanning {vh_start} to {vh_end}")) -->

<!-- pin_write(board, weather_terminal_history_raw, -->
<!--           type = "csv", -->
<!--           title = "Raw historical weather data at ferry terminals", -->
<!--           description = glue("From `open-meteo.com` spanning {wx_start} to {wx_end}")) -->


<!-- ``` -->
